/*
Sonarr

Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.

API version: v4.0.9.2244
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonarr

import (
	"encoding/json"
	"fmt"
)

// ListSyncLevelType the model 'ListSyncLevelType'
type ListSyncLevelType string

// List of ListSyncLevelType
const (
	LISTSYNCLEVELTYPE_DISABLED ListSyncLevelType = "disabled"
	LISTSYNCLEVELTYPE_LOG_ONLY ListSyncLevelType = "logOnly"
	LISTSYNCLEVELTYPE_KEEP_AND_UNMONITOR ListSyncLevelType = "keepAndUnmonitor"
	LISTSYNCLEVELTYPE_KEEP_AND_TAG ListSyncLevelType = "keepAndTag"
)

// All allowed values of ListSyncLevelType enum
var AllowedListSyncLevelTypeEnumValues = []ListSyncLevelType{
	"disabled",
	"logOnly",
	"keepAndUnmonitor",
	"keepAndTag",
}

func (v *ListSyncLevelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListSyncLevelType(value)
	for _, existing := range AllowedListSyncLevelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListSyncLevelType", value)
}

// NewListSyncLevelTypeFromValue returns a pointer to a valid ListSyncLevelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListSyncLevelTypeFromValue(v string) (*ListSyncLevelType, error) {
	ev := ListSyncLevelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListSyncLevelType: valid values are %v", v, AllowedListSyncLevelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListSyncLevelType) IsValid() bool {
	for _, existing := range AllowedListSyncLevelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ListSyncLevelType value
func (v ListSyncLevelType) Ptr() *ListSyncLevelType {
	return &v
}

type NullableListSyncLevelType struct {
	value *ListSyncLevelType
	isSet bool
}

func (v NullableListSyncLevelType) Get() *ListSyncLevelType {
	return v.value
}

func (v *NullableListSyncLevelType) Set(val *ListSyncLevelType) {
	v.value = val
	v.isSet = true
}

func (v NullableListSyncLevelType) IsSet() bool {
	return v.isSet
}

func (v *NullableListSyncLevelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSyncLevelType(val *ListSyncLevelType) *NullableListSyncLevelType {
	return &NullableListSyncLevelType{value: val, isSet: true}
}

func (v NullableListSyncLevelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSyncLevelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

