/*
Sonarr

Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.

API version: v4.0.1.929
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonarr

import (
	"encoding/json"
)

// checks if the ParseResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParseResource{}

// ParseResource struct for ParseResource
type ParseResource struct {
	Id *int32 `json:"id,omitempty"`
	Title NullableString `json:"title,omitempty"`
	ParsedEpisodeInfo *ParsedEpisodeInfo `json:"parsedEpisodeInfo,omitempty"`
	Series *SeriesResource `json:"series,omitempty"`
	Episodes []EpisodeResource `json:"episodes,omitempty"`
	Languages []Language `json:"languages,omitempty"`
	CustomFormats []CustomFormatResource `json:"customFormats,omitempty"`
	CustomFormatScore *int32 `json:"customFormatScore,omitempty"`
}

// NewParseResource instantiates a new ParseResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParseResource() *ParseResource {
	this := ParseResource{}
	return &this
}

// NewParseResourceWithDefaults instantiates a new ParseResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParseResourceWithDefaults() *ParseResource {
	this := ParseResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ParseResource) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParseResource) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ParseResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ParseResource) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParseResource) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParseResource) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *ParseResource) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *ParseResource) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *ParseResource) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *ParseResource) UnsetTitle() {
	o.Title.Unset()
}

// GetParsedEpisodeInfo returns the ParsedEpisodeInfo field value if set, zero value otherwise.
func (o *ParseResource) GetParsedEpisodeInfo() ParsedEpisodeInfo {
	if o == nil || IsNil(o.ParsedEpisodeInfo) {
		var ret ParsedEpisodeInfo
		return ret
	}
	return *o.ParsedEpisodeInfo
}

// GetParsedEpisodeInfoOk returns a tuple with the ParsedEpisodeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParseResource) GetParsedEpisodeInfoOk() (*ParsedEpisodeInfo, bool) {
	if o == nil || IsNil(o.ParsedEpisodeInfo) {
		return nil, false
	}
	return o.ParsedEpisodeInfo, true
}

// HasParsedEpisodeInfo returns a boolean if a field has been set.
func (o *ParseResource) HasParsedEpisodeInfo() bool {
	if o != nil && !IsNil(o.ParsedEpisodeInfo) {
		return true
	}

	return false
}

// SetParsedEpisodeInfo gets a reference to the given ParsedEpisodeInfo and assigns it to the ParsedEpisodeInfo field.
func (o *ParseResource) SetParsedEpisodeInfo(v ParsedEpisodeInfo) {
	o.ParsedEpisodeInfo = &v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *ParseResource) GetSeries() SeriesResource {
	if o == nil || IsNil(o.Series) {
		var ret SeriesResource
		return ret
	}
	return *o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParseResource) GetSeriesOk() (*SeriesResource, bool) {
	if o == nil || IsNil(o.Series) {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *ParseResource) HasSeries() bool {
	if o != nil && !IsNil(o.Series) {
		return true
	}

	return false
}

// SetSeries gets a reference to the given SeriesResource and assigns it to the Series field.
func (o *ParseResource) SetSeries(v SeriesResource) {
	o.Series = &v
}

// GetEpisodes returns the Episodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParseResource) GetEpisodes() []EpisodeResource {
	if o == nil {
		var ret []EpisodeResource
		return ret
	}
	return o.Episodes
}

// GetEpisodesOk returns a tuple with the Episodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParseResource) GetEpisodesOk() ([]EpisodeResource, bool) {
	if o == nil || IsNil(o.Episodes) {
		return nil, false
	}
	return o.Episodes, true
}

// HasEpisodes returns a boolean if a field has been set.
func (o *ParseResource) HasEpisodes() bool {
	if o != nil && IsNil(o.Episodes) {
		return true
	}

	return false
}

// SetEpisodes gets a reference to the given []EpisodeResource and assigns it to the Episodes field.
func (o *ParseResource) SetEpisodes(v []EpisodeResource) {
	o.Episodes = v
}

// GetLanguages returns the Languages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParseResource) GetLanguages() []Language {
	if o == nil {
		var ret []Language
		return ret
	}
	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParseResource) GetLanguagesOk() ([]Language, bool) {
	if o == nil || IsNil(o.Languages) {
		return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *ParseResource) HasLanguages() bool {
	if o != nil && IsNil(o.Languages) {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given []Language and assigns it to the Languages field.
func (o *ParseResource) SetLanguages(v []Language) {
	o.Languages = v
}

// GetCustomFormats returns the CustomFormats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParseResource) GetCustomFormats() []CustomFormatResource {
	if o == nil {
		var ret []CustomFormatResource
		return ret
	}
	return o.CustomFormats
}

// GetCustomFormatsOk returns a tuple with the CustomFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParseResource) GetCustomFormatsOk() ([]CustomFormatResource, bool) {
	if o == nil || IsNil(o.CustomFormats) {
		return nil, false
	}
	return o.CustomFormats, true
}

// HasCustomFormats returns a boolean if a field has been set.
func (o *ParseResource) HasCustomFormats() bool {
	if o != nil && IsNil(o.CustomFormats) {
		return true
	}

	return false
}

// SetCustomFormats gets a reference to the given []CustomFormatResource and assigns it to the CustomFormats field.
func (o *ParseResource) SetCustomFormats(v []CustomFormatResource) {
	o.CustomFormats = v
}

// GetCustomFormatScore returns the CustomFormatScore field value if set, zero value otherwise.
func (o *ParseResource) GetCustomFormatScore() int32 {
	if o == nil || IsNil(o.CustomFormatScore) {
		var ret int32
		return ret
	}
	return *o.CustomFormatScore
}

// GetCustomFormatScoreOk returns a tuple with the CustomFormatScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParseResource) GetCustomFormatScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.CustomFormatScore) {
		return nil, false
	}
	return o.CustomFormatScore, true
}

// HasCustomFormatScore returns a boolean if a field has been set.
func (o *ParseResource) HasCustomFormatScore() bool {
	if o != nil && !IsNil(o.CustomFormatScore) {
		return true
	}

	return false
}

// SetCustomFormatScore gets a reference to the given int32 and assigns it to the CustomFormatScore field.
func (o *ParseResource) SetCustomFormatScore(v int32) {
	o.CustomFormatScore = &v
}

func (o ParseResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParseResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if !IsNil(o.ParsedEpisodeInfo) {
		toSerialize["parsedEpisodeInfo"] = o.ParsedEpisodeInfo
	}
	if !IsNil(o.Series) {
		toSerialize["series"] = o.Series
	}
	if o.Episodes != nil {
		toSerialize["episodes"] = o.Episodes
	}
	if o.Languages != nil {
		toSerialize["languages"] = o.Languages
	}
	if o.CustomFormats != nil {
		toSerialize["customFormats"] = o.CustomFormats
	}
	if !IsNil(o.CustomFormatScore) {
		toSerialize["customFormatScore"] = o.CustomFormatScore
	}
	return toSerialize, nil
}

type NullableParseResource struct {
	value *ParseResource
	isSet bool
}

func (v NullableParseResource) Get() *ParseResource {
	return v.value
}

func (v *NullableParseResource) Set(val *ParseResource) {
	v.value = val
	v.isSet = true
}

func (v NullableParseResource) IsSet() bool {
	return v.isSet
}

func (v *NullableParseResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParseResource(val *ParseResource) *NullableParseResource {
	return &NullableParseResource{value: val, isSet: true}
}

func (v NullableParseResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParseResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


