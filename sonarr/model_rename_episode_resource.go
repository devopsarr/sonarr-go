/*
Sonarr

Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.

API version: v4.0.4.1491
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonarr

import (
	"encoding/json"
)

// checks if the RenameEpisodeResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RenameEpisodeResource{}

// RenameEpisodeResource struct for RenameEpisodeResource
type RenameEpisodeResource struct {
	Id *int32 `json:"id,omitempty"`
	SeriesId *int32 `json:"seriesId,omitempty"`
	SeasonNumber *int32 `json:"seasonNumber,omitempty"`
	EpisodeNumbers []int32 `json:"episodeNumbers,omitempty"`
	EpisodeFileId *int32 `json:"episodeFileId,omitempty"`
	ExistingPath NullableString `json:"existingPath,omitempty"`
	NewPath NullableString `json:"newPath,omitempty"`
}

// NewRenameEpisodeResource instantiates a new RenameEpisodeResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenameEpisodeResource() *RenameEpisodeResource {
	this := RenameEpisodeResource{}
	return &this
}

// NewRenameEpisodeResourceWithDefaults instantiates a new RenameEpisodeResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenameEpisodeResourceWithDefaults() *RenameEpisodeResource {
	this := RenameEpisodeResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RenameEpisodeResource) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenameEpisodeResource) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RenameEpisodeResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RenameEpisodeResource) SetId(v int32) {
	o.Id = &v
}

// GetSeriesId returns the SeriesId field value if set, zero value otherwise.
func (o *RenameEpisodeResource) GetSeriesId() int32 {
	if o == nil || IsNil(o.SeriesId) {
		var ret int32
		return ret
	}
	return *o.SeriesId
}

// GetSeriesIdOk returns a tuple with the SeriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenameEpisodeResource) GetSeriesIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SeriesId) {
		return nil, false
	}
	return o.SeriesId, true
}

// HasSeriesId returns a boolean if a field has been set.
func (o *RenameEpisodeResource) HasSeriesId() bool {
	if o != nil && !IsNil(o.SeriesId) {
		return true
	}

	return false
}

// SetSeriesId gets a reference to the given int32 and assigns it to the SeriesId field.
func (o *RenameEpisodeResource) SetSeriesId(v int32) {
	o.SeriesId = &v
}

// GetSeasonNumber returns the SeasonNumber field value if set, zero value otherwise.
func (o *RenameEpisodeResource) GetSeasonNumber() int32 {
	if o == nil || IsNil(o.SeasonNumber) {
		var ret int32
		return ret
	}
	return *o.SeasonNumber
}

// GetSeasonNumberOk returns a tuple with the SeasonNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenameEpisodeResource) GetSeasonNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.SeasonNumber) {
		return nil, false
	}
	return o.SeasonNumber, true
}

// HasSeasonNumber returns a boolean if a field has been set.
func (o *RenameEpisodeResource) HasSeasonNumber() bool {
	if o != nil && !IsNil(o.SeasonNumber) {
		return true
	}

	return false
}

// SetSeasonNumber gets a reference to the given int32 and assigns it to the SeasonNumber field.
func (o *RenameEpisodeResource) SetSeasonNumber(v int32) {
	o.SeasonNumber = &v
}

// GetEpisodeNumbers returns the EpisodeNumbers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RenameEpisodeResource) GetEpisodeNumbers() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.EpisodeNumbers
}

// GetEpisodeNumbersOk returns a tuple with the EpisodeNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RenameEpisodeResource) GetEpisodeNumbersOk() ([]int32, bool) {
	if o == nil || IsNil(o.EpisodeNumbers) {
		return nil, false
	}
	return o.EpisodeNumbers, true
}

// HasEpisodeNumbers returns a boolean if a field has been set.
func (o *RenameEpisodeResource) HasEpisodeNumbers() bool {
	if o != nil && !IsNil(o.EpisodeNumbers) {
		return true
	}

	return false
}

// SetEpisodeNumbers gets a reference to the given []int32 and assigns it to the EpisodeNumbers field.
func (o *RenameEpisodeResource) SetEpisodeNumbers(v []int32) {
	o.EpisodeNumbers = v
}

// GetEpisodeFileId returns the EpisodeFileId field value if set, zero value otherwise.
func (o *RenameEpisodeResource) GetEpisodeFileId() int32 {
	if o == nil || IsNil(o.EpisodeFileId) {
		var ret int32
		return ret
	}
	return *o.EpisodeFileId
}

// GetEpisodeFileIdOk returns a tuple with the EpisodeFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenameEpisodeResource) GetEpisodeFileIdOk() (*int32, bool) {
	if o == nil || IsNil(o.EpisodeFileId) {
		return nil, false
	}
	return o.EpisodeFileId, true
}

// HasEpisodeFileId returns a boolean if a field has been set.
func (o *RenameEpisodeResource) HasEpisodeFileId() bool {
	if o != nil && !IsNil(o.EpisodeFileId) {
		return true
	}

	return false
}

// SetEpisodeFileId gets a reference to the given int32 and assigns it to the EpisodeFileId field.
func (o *RenameEpisodeResource) SetEpisodeFileId(v int32) {
	o.EpisodeFileId = &v
}

// GetExistingPath returns the ExistingPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RenameEpisodeResource) GetExistingPath() string {
	if o == nil || IsNil(o.ExistingPath.Get()) {
		var ret string
		return ret
	}
	return *o.ExistingPath.Get()
}

// GetExistingPathOk returns a tuple with the ExistingPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RenameEpisodeResource) GetExistingPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExistingPath.Get(), o.ExistingPath.IsSet()
}

// HasExistingPath returns a boolean if a field has been set.
func (o *RenameEpisodeResource) HasExistingPath() bool {
	if o != nil && o.ExistingPath.IsSet() {
		return true
	}

	return false
}

// SetExistingPath gets a reference to the given NullableString and assigns it to the ExistingPath field.
func (o *RenameEpisodeResource) SetExistingPath(v string) {
	o.ExistingPath.Set(&v)
}
// SetExistingPathNil sets the value for ExistingPath to be an explicit nil
func (o *RenameEpisodeResource) SetExistingPathNil() {
	o.ExistingPath.Set(nil)
}

// UnsetExistingPath ensures that no value is present for ExistingPath, not even an explicit nil
func (o *RenameEpisodeResource) UnsetExistingPath() {
	o.ExistingPath.Unset()
}

// GetNewPath returns the NewPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RenameEpisodeResource) GetNewPath() string {
	if o == nil || IsNil(o.NewPath.Get()) {
		var ret string
		return ret
	}
	return *o.NewPath.Get()
}

// GetNewPathOk returns a tuple with the NewPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RenameEpisodeResource) GetNewPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewPath.Get(), o.NewPath.IsSet()
}

// HasNewPath returns a boolean if a field has been set.
func (o *RenameEpisodeResource) HasNewPath() bool {
	if o != nil && o.NewPath.IsSet() {
		return true
	}

	return false
}

// SetNewPath gets a reference to the given NullableString and assigns it to the NewPath field.
func (o *RenameEpisodeResource) SetNewPath(v string) {
	o.NewPath.Set(&v)
}
// SetNewPathNil sets the value for NewPath to be an explicit nil
func (o *RenameEpisodeResource) SetNewPathNil() {
	o.NewPath.Set(nil)
}

// UnsetNewPath ensures that no value is present for NewPath, not even an explicit nil
func (o *RenameEpisodeResource) UnsetNewPath() {
	o.NewPath.Unset()
}

func (o RenameEpisodeResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RenameEpisodeResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SeriesId) {
		toSerialize["seriesId"] = o.SeriesId
	}
	if !IsNil(o.SeasonNumber) {
		toSerialize["seasonNumber"] = o.SeasonNumber
	}
	if o.EpisodeNumbers != nil {
		toSerialize["episodeNumbers"] = o.EpisodeNumbers
	}
	if !IsNil(o.EpisodeFileId) {
		toSerialize["episodeFileId"] = o.EpisodeFileId
	}
	if o.ExistingPath.IsSet() {
		toSerialize["existingPath"] = o.ExistingPath.Get()
	}
	if o.NewPath.IsSet() {
		toSerialize["newPath"] = o.NewPath.Get()
	}
	return toSerialize, nil
}

type NullableRenameEpisodeResource struct {
	value *RenameEpisodeResource
	isSet bool
}

func (v NullableRenameEpisodeResource) Get() *RenameEpisodeResource {
	return v.value
}

func (v *NullableRenameEpisodeResource) Set(val *RenameEpisodeResource) {
	v.value = val
	v.isSet = true
}

func (v NullableRenameEpisodeResource) IsSet() bool {
	return v.isSet
}

func (v *NullableRenameEpisodeResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenameEpisodeResource(val *RenameEpisodeResource) *NullableRenameEpisodeResource {
	return &NullableRenameEpisodeResource{value: val, isSet: true}
}

func (v NullableRenameEpisodeResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenameEpisodeResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


